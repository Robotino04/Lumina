#version 460

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba16f, set = 0, binding = 0) uniform image2D image;

layout(push_constant) uniform constants {
    vec4 color1;
    vec2 mousePos;
} PushConstants;

const int MAX_ITER = 100;
const int AA_COUNT = 2;
const float AA_COUNT_2 = float(AA_COUNT) / 2;

vec2 toLocalSpace(vec2 pos, vec2 size) {
    float max_axis = max(size.x, size.y);
    return (pos - size / 2) / (max_axis / 4);
}

void main() {
    vec3 color = vec3(0);

    for (int x_offset = 0; x_offset < AA_COUNT; x_offset++) {
        for (int y_offset = 0; y_offset < AA_COUNT; y_offset++) {
            vec2 size = imageSize(image);
            vec2 texelCoord = gl_GlobalInvocationID.xy + (vec2(x_offset, y_offset) - AA_COUNT_2) / AA_COUNT_2;

            bool did_exit = false;
            vec2 z = toLocalSpace(texelCoord, size);
            vec2 c = toLocalSpace(PushConstants.mousePos, size);

            int i;
            for (i = 0; i < MAX_ITER; i++) {
                z = vec2(
                        z.x * z.x - z.y * z.y,
                        2 * z.x * z.y
                    ) + c;

                if (dot(z, z) >= 4) {
                    did_exit = true;
                    break;
                }
            }
            if (did_exit) {
                color += vec3(sqrt(float(i) / float(MAX_ITER)));
            }
        }
    }
    imageStore(image, ivec2(gl_GlobalInvocationID), PushConstants.color1 * vec4(color / float(AA_COUNT * AA_COUNT), 1.0));
}
